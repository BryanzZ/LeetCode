{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12600\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 public class Solution \{\
    public List<List<String>> findDuplicate(String[] paths) \{\
        Map<String, ArrayList<String>> duplicateFilesMap = new HashMap<String, ArrayList<String>>();\
        \
        for (int i = 0; i < paths.length; i++)\{\
            String[] filePath = paths[i].split(" ");\
            for (int j = 1; j < filePath.length; j++)\{\
                String path = filePath[0];\
                String file = filePath[j];\
                String fileName =file.substring(0, file.indexOf(".txt") + 4);\
                String fileContent =file.substring(file.indexOf(".txt") + 5, file.length() - 1);\
                \
                ArrayList<String> fileList = duplicateFilesMap.get(fileContent);\
                if(fileList == null)\{\
                    fileList = new ArrayList();\
                    fileList.add(path + "/" + fileName);\
                    duplicateFilesMap.put(fileContent, fileList);\
                \}\
                else\{\
                    fileList.add(path + "/" + fileName);\
                \}\
            \}\
        \}\
        \
        List<List<String>> duplicateFilesList = new ArrayList();\
        for (Map.Entry<String, ArrayList<String>> entry : duplicateFilesMap.entrySet())\{\
            if(entry.getValue().size() > 1)\{\
                ArrayList<String> duplicateFiles = entry.getValue();\
                duplicateFilesList.add(duplicateFiles);\
            \}\
        \}\
        \
        return duplicateFilesList;\
    \}\
\}}