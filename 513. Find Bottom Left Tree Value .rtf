{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12600\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    \
    Queue<TreeNode> queue = new LinkedList<TreeNode>();\
\
    public int findBottomLeftValue(TreeNode root) \{\
        queue.add(root);\
        int lastNumber = -1;\
        \
        while (!queue.isEmpty()) \{\
            if(queue.peek().right != null)\{\
                queue.add(queue.peek().right);\
            \}\
            if(queue.peek().left != null)\{\
                lastNumber = queue.peek().val;\
                queue.add(queue.peek().left);\
            \}\
            lastNumber = queue.remove().val;\
        \}\
        return lastNumber;\
    \}\
\}}