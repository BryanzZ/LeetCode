{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12600\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    Map<Integer, Integer> sumCountMap = new HashMap<Integer, Integer>();\
    int maxCount = 0;\
\
    public int[] findFrequentTreeSum(TreeNode root) \{\
        if(root == null)\{\
            int[] emptyArr = \{\};\
            return emptyArr;\
        \}\
\
        findTreesSum(root);\
        \
        ArrayList<Integer> treeSumArray = new ArrayList<Integer>();\
        for (Map.Entry<Integer, Integer> item : sumCountMap.entrySet()) \{\
           if(item.getValue() == maxCount)\{\
               treeSumArray.add(item.getKey());\
           \}\
        \}\
        int[] arr = new int[treeSumArray.size()];\
\
        for(int i = 0; i < treeSumArray.size(); i++) \{\
            if (treeSumArray.get(i) != null) \{\
                arr[i] = treeSumArray.get(i);\
            \}\
        \}    \
        \
        return arr;\
    \}\
    \
    public int findTreesSum(TreeNode root)\{\
        if(root == null)\{\
            return 0;\
        \}\
        \
        int sum = 0;\
        sum += root.val;\
        if(root.left != null)\{\
            sum += findTreesSum(root.left);\
        \}\
        if(root.right != null)\{\
            sum += findTreesSum(root.right);\
        \}\
        \
        sumCount(sum);\
        return sum;\
    \}\
    \
    public void sumCount(int sum)\{\
        int count = 0;\
        if(sumCountMap.containsKey(sum))\{\
            int lastCount = sumCountMap.get(sum);\
            lastCount++;\
            count = lastCount;\
            sumCountMap.put(sum, count);\
        \}\
        else\{\
            count = 1;\
            sumCountMap.put(sum, count);\
        \}\
        \
        if(count > maxCount)\{\
            maxCount = count;\
        \}\
    \}\
\}}