{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12600\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) \{\
        TreeNode newTree = new TreeNode(0);\
        if (t1 != null && t2 != null)\{\
            newTree.val = t1.val + t2.val;\
            newTree.left = mergeTrees(t1.left, t2.left);\
            newTree.right = mergeTrees(t1.right, t2.right);\
        \}\
        else if (t1 != null)\{\
            newTree = t1;\
        \}\
        else if (t2 != null)\{\
            newTree = t2;\
        \}\
        else\{\
            return null;\
        \}\
\
        return newTree;\
    \}\
\}}